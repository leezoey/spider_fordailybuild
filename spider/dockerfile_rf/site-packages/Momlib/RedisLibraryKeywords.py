# -*- coding: utf-8 -*-
from robot.api import logger
from robot.api.deco import keyword
from robot.utils.dotdict import DotDict
import sys
from rg_global import RgGlobal
from rg_mom_sync import RgMomSync
from rg_mom_common import Db, Cmd
from rg_obj.p.libpub import common_type
from IPy import IP
import re
from rg_obj import *

proto = {}
mom = {}
glb = None
GETPROTO = {}

def db_name_convert(db_name):
    if db_name in dir(Db):
        return eval("Db." + db_name)
    else:
        logger.error("wrong DB_NAME")
        return None

def analyse_result_old(result, field, dict_fields):
    dict_fields[field] = eval("result."+field)
    if isinstance(dict_fields[field], type(common_type.Ip())):
        if (dict_fields[field].v6 != None):
            return eval("result."+field+".v6.data")
        if (dict_fields[field].v4 != None):
            return eval("result."+field+".v4.data")
    elif isinstance(dict_fields[field], type(common_type.Ipv4())):
        return eval("result."+field+".data")
    elif isinstance(dict_fields[field], type(common_type.Ipv6())):
        return eval("result."+field+".data")
    elif isinstance(dict_fields[field], type(common_type.Mac())):
        return eval("result."+field+".data")
    else:
        return eval("result."+field)

def analyse_result(result, field, dict_fields):
    global GETPROTO
    dict_fields[field] = eval("result."+field)
    if isinstance(dict_fields[field], type(common_type.Ip())):
        if (dict_fields[field].v6 != None):
            return eval("result."+field+".v6.data")
        if (dict_fields[field].v4 != None):
            return eval("result."+field+".v4.data")
    elif isinstance(dict_fields[field], type(common_type.Ipv4())):
        return eval("result."+field+".data")
    elif isinstance(dict_fields[field], type(common_type.Ipv6())):
        return eval("result."+field+".data")
    elif isinstance(dict_fields[field], type(common_type.Mac())):
        return eval("result."+field+".data")
    else:
        return eval("result."+field)



class RedisLibraryKeywords(object):
    global mom

    def __init__(self):
        self.common_type_data_key = 'data'
        self.common_type_module = 'common_type'

    @keyword('Rg Evaluate')
    def rg_evaluate(self, cmd):
        return eval(cmd)

    @keyword('New Proto Object')
    def new_proto_object(self, proto_id, proto_name, message, dict_fields):
        global proto
        proto[proto_id] = eval(proto_name + '.' + message + '()')
        for field in dict_fields:
            #logger.error(type(dict_fields[field]))
            if isinstance(dict_fields[field], list ):
                for i in range(len(dict_fields[field])):
                    exec('proto[proto_id].'+ field + '.add()')
                    if isinstance(dict_fields[field][i], (dict, type(DotDict))):
                        for sub in dict_fields[field][i]:
                            logger.error('proto[proto_id].' + field + '['+ str(i)+'].'+sub+' = ' + dict_fields[field][i][sub])
                            exec('proto[proto_id].' + field + '['+ str(i)+'].'+sub+' = ' + dict_fields[field][i][sub])
                    else:
                        exec('proto[proto_id].'+ field +'['+ str(i)+']='+ str(dict_fields[field][i]))
            else:
                exec('proto[proto_id].' + field + ' = ' + dict_fields[field])
        return proto[proto_id]

    @keyword('New Ip With Ipv4')
    def new_with_ipv4_object(self, proto_id, value):
        '''common_type message ip set ipv4 v4 = tag

        :param proto_id:类似数据库key
        :param value:ipv4 地址值
        :param proto_name:proto文件名
        :return:proto 字典
        '''
        global proto

        ipv4 = IP(value)
        if ipv4.version() == 4:
            value = ipv4.int()
            proto['ipv4'] = getattr(globals().get(self.common_type_module), 'Ipv4')()
            proto[proto_id] = getattr(globals().get(self.common_type_module), 'Ip')()
            setattr(proto['ipv4'], self.common_type_data_key, value)
            setattr(proto[proto_id], 'v4', proto['ipv4'])
        else:
            raise Exception("The input is not ipv4")
        return proto[proto_id]

    @keyword('New Ipv4')
    def new_ipv4_object(self, proto_id, value):
        '''common_type message Ipv4 set data

        :param proto_id:类似数据库key
        :param value:ipv4 地址值
        :param proto_name:proto文件名
        :return:proto 字典
        '''
        global proto
        ipv4 = IP(value)
        if ipv4.version() == 4:
            value = ipv4.int()
            proto[proto_id] = getattr(globals().get(self.common_type_module), 'Ipv4')()
            setattr(proto[proto_id], self.common_type_data_key, value)
        else:
            raise Exception("The input is not ipv4")
        return proto[proto_id]


    @keyword('New Ip With Ipv6')
    def new_with_ipv6_object(self, proto_id, value):
        '''common_type message ip set ipv6 v6 = tag

        :param proto_id:类似数据库key
        :param value:ipv6 地址值
        :param proto_name:proto文件名
        :return:proto 字典
        '''
        global proto
        ipv6 = IP(value)
        if ipv6.version() == 6:
            value = ipv6.strHex().replace('0x', '')
            value = bytes.fromhex(value)
            proto['ipv6'] = getattr(globals().get(self.common_type_module), 'Ipv6')()
            proto[proto_id] = getattr(globals().get(self.common_type_module), 'Ip')()
            setattr(proto["ipv6"], self.common_type_data_key, value)
            setattr(proto[proto_id], 'v6', proto['ipv6'])
        else:
            raise Exception("The input is not ipv4")
        return proto[proto_id]

    @keyword('New Ipv6')
    def new_ipv6_object(self, proto_id, value):
        '''common_type message ipv6 set data

        :param proto_id:类似数据库key
        :param value:ipv6 地址值
        :param proto_name:proto文件名
        :return:proto 字典
        '''
        global proto
        ipv6 = IP(value)
        if ipv6.version() == 6:
            value = ipv6.strHex().replace('0x', '')
            value = bytes.fromhex(value)
            proto[proto_id] = getattr(globals().get(self.common_type_module), 'Ipv6')()
            setattr(proto[proto_id], self.common_type_data_key, value)
        else:
            raise Exception("The input is not ipv6")
        return proto[proto_id]

    @keyword('New Mac')
    def new_mac_object(self, proto_id, value):
        '''common_type message mac set data

        :param proto_id:类似数据库key
        :param value:mac 地址值
        '''
        global proto
        if '.' in value:
            value = bytes.fromhex(value.replace('.', ''))
            proto[proto_id] = getattr(globals().get(self.common_type_module), 'Mac')()
            setattr(proto[proto_id], self.common_type_data_key, value)
        else:
            raise Exception("%s is not mac type,such as 0000.1111.2222" % (value))

        return proto[proto_id]

    @keyword('Connect To Redis')
    def connect_to_redis(self, db_name):
        global mom
        global glb
        
        try:
            if glb == None:
                glb = RgGlobal('RF_demo')
            db = db_name_convert(db_name)
            if glb.connect_sync(db) != 0:
                sys.exit()
            mom[db_name] = RgMomSync(glb)
        except Exception as ex:
            logger.error(str(ex))
            raise Exception(str(ex))

    @keyword('Get From Redis')
    def get_from_redis(self, db_name, proto_id, dict_fields):
        global mom
        global proto
        
        db = db_name_convert(db_name)
        result = mom[db_name].get(db, proto[proto_id], 1)
        GETPROTO[proto_id] = result
        if result is None:        
            logger.error(result)
            return {}
        else:
            for field in dict_fields:
                dict_fields[field] = analyse_result(result, field, dict_fields)
            return dict_fields

    @keyword('Set To Redis')
    def set_to_redis(self, db_name, proto_id):
        global mom
        global proto

        db = db_name_convert(db_name)
        mom[db_name].set(db, proto[proto_id], 1)

    @keyword('Sadd To Redis')
    def sadd_to_redis(self, db_name, proto_id):
        global mom
        global proto

        db = db_name_convert(db_name)
        mom[db_name].sadd(db, proto[proto_id], 1)

    @keyword('Srem To Redis')
    def srem_to_redis(self, db_name, proto_id):
        global mom
        global proto

        db = db_name_convert(db_name)
        mom[db_name].srem(db, proto[proto_id], 1)

    @keyword('Sismember To Redis')
    def sismember_to_redis(self, db_name, proto_id):
        global mom
        global proto

        db = db_name_convert(db_name)
        result = mom[db_name].sismember(db, proto[proto_id], 1)
        if result is None:
            logger.error(result)
        return result

    @keyword('Scan To Redis')
    def scan_redis(self, db_name, proto_id, proto_name, message, dict_fields):
        '''

        :param db_name: 逻辑数据库名称
        :param proto_id:proto id字段,可根据规则自定义
        :param proto_name:proto 文件名称
        :param message:proto message名称
        :param dict_fields:proto 查询键值对
        :return:
        '''
        global mom
        global proto
        value_tag = {'result':  False}

        def cb(msg, value_tag):
            '''mom回调函数
            :param msg: 回调信息
            :param value_tag: 回调状态标识
            :return: dict
            '''
            result = getattr(globals().get(proto_name), message)(msg.value)
            if value_tag['result']:
                return
            for key, value in dict_fields.items():
                input_value = getattr(input_proto, key)
                db_value = getattr(result, key)
                if input_value != db_value:
                    if key == 'index':
                        continue
                    else:
                        value_tag['result'] = False
                        return
                continue
            value_tag['result'] = True
            return
        db = db_name_convert(db_name)
        input_proto = proto[proto_id]
        mom[db_name].scan(db, proto[proto_id], 0, cb, value_tag)
        return value_tag['result']

    @keyword('Scard To Redis')
    def scard_redis(self, db_name, proto_id):
        global mom
        global proto

        db = db_name_convert(db_name)
        result = mom[db_name].scard(db, proto[proto_id], 1)
        if result is None:
            logger.error(result)
            return {}
        return result

    @keyword('Delete From Redis')
    def delete_from_redis(self, db_name, proto_id):
        global mom
        global proto
        
        db = db_name_convert(db_name)
        return mom[db_name].delete(db, proto[proto_id], 1)

    @keyword('Redis Key Should Be Exist')
    def check_if_key_exits(self, db_name, proto_id):
        global mom
        global proto
        
        db = db_name_convert(db_name)
        if mom[db_name].exists(db, proto[proto_id]) != 0:
            logger.error("Key " + proto_id + " doesn't exist in Redis.")
            raise AssertionError

    @keyword('Redis Key Should Not Be Exist')
    def check_if_key_not_exits(self, db_name, proto_id):
        global mom
        global proto

        db = db_name_convert(db_name)
        if mom[db_name].exists(db, proto[proto_id]) == 0:
            logger.error("Key " + proto_id + " exist in Redis.")
            raise AssertionError

    @keyword('Hmset To Redis')
    def hmset_to_redis(self, db_name, proto_id, select_fields):
        global mom
        global proto

        db = db_name_convert(db_name)
        mom[db_name].hmset(db, proto[proto_id], select_fields, 1)

    @keyword('Hgetall from Redis')
    def hgetall(self, db_name, proto_id, dict_fields):
        global mom
        global proto
        
        db = db_name_convert(db_name)
        result, _, _ = mom[db_name].hgetall(db, proto[proto_id], flag=1)
        GETPROTO[proto_id] = result
        for field in dict_fields:
            dict_fields[field] = analyse_result(result, field, dict_fields)
        return dict_fields

    @keyword('Flush Db')
    def flushdb(self, db_name):
        global mom
        db = db_name_convert(db_name)
        mom[db_name].flushdb(db)

    @keyword('Del GetProto Object')
    def del_get_proto_object(self, proto_id):
        global GETPROTO
        if GETPROTO.get(proto_id):
            del GETPROTO[proto_id]

    @keyword('Del Proto Object')
    def del_proto_object(self, proto_id):
        global proto
        if proto.get(proto_id):
            del proto[proto_id]



