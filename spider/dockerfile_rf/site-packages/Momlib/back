# -*- coding: utf-8 -*-
from robot.api import logger
from robot.api.deco import keyword
from robot.utils.dotdict import DotDict

from rg_global import RgGlobal
from rg_mom_sync import RgMomSync
from rg_mom_common import Db
from rg_obj.p.libpub import common_type 
from rg_obj import *

proto = {}
mom = {}
glb = None

def db_name_convert(db_name):
    if db_name in dir(Db):
        return eval("Db." + db_name)
    else:
        logger.error("wrong DB_NAME")
        return None

def analyse_result(result, field, dict_fields):
    dict_fields[field] = eval("result."+field)
    if isinstance(dict_fields[field], type(common_type.Ip())):
        if (dict_fields[field].v6 != None):
            return eval("result."+field+".v6.data")
        if (dict_fields[field].v4 != None):
            return eval("result."+field+".v4.data")
    elif isinstance(dict_fields[field], type(common_type.Ipv4())):
        return eval("result."+field+".data")
    elif isinstance(dict_fields[field], type(common_type.Ipv6())):
        return eval("result."+field+".data")
    elif isinstance(dict_fields[field], type(common_type.Mac())):
        return eval("result."+field+".data")
    else:
        return eval("result."+field)

class RedisLibraryKeywords(object):
    global mom

    @keyword('Rg Evaluate')
    def rg_evaluate(self, cmd):
        return eval(cmd)

    @keyword('New Proto Object')
    def new_proto_object(self, proto_id, proto_name, message, dict_fields):
        global proto
        proto[proto_id] = eval(proto_name + '.' + message + '()')
        for field in dict_fields:
            #logger.error(type(dict_fields[field]))
            if isinstance(dict_fields[field], list ):
                for i in range(len(dict_fields[field])):
                    exec('proto[proto_id].'+ field + '.add()')
                    if isinstance(dict_fields[field][i], (dict, type(DotDict))):
                        for sub in dict_fields[field][i]:
                            logger.error('proto[proto_id].' + field + '['+ str(i)+'].'+sub+' = ' + dict_fields[field][i][sub])
                            exec('proto[proto_id].' + field + '['+ str(i)+'].'+sub+' = ' + dict_fields[field][i][sub])
                    else:
                        exec('proto[proto_id].'+ field +'['+ str(i)+']='+ str(dict_fields[field][i]))
            else:
                exec('proto[proto_id].' + field + ' = ' + dict_fields[field])
        return proto[proto_id]
    
    @keyword('Connect To Redis')
    def connect_to_redis(self, db_name):
        global mom
        global glb
        
        try:
            if glb == None:
                glb = RgGlobal('RF_demo')
            db = db_name_convert(db_name)
            glb.connect_sync(db)
            mom[db_name] = RgMomSync(glb)
        except Exception as ex:
            logger.error(str(ex))
            raise Exception(str(ex))

        
    @keyword('Get From Redis')
    def get_from_redis(self, db_name, proto_id, dict_fields):
        global mom
        global proto
        
        db = db_name_convert(db_name)
        result = mom[db_name].get(db, proto[proto_id], 1)
        if result is None:        
            logger.error(result)
            return {}
        else:
            for field in dict_fields:
                dict_fields[field] = analyse_result(result, field, dict_fields)
            return dict_fields

    @keyword('Set To Redis')
    def set_to_redis(self, db_name, proto_id):
        global mom
        global proto

        db = db_name_convert(db_name)
        mom[db_name].set(db, proto[proto_id], 1)

    @keyword('Delete From Redis')
    def delete_from_redis(self, db_name, proto_id):
        global mom
        global proto
        
        db = db_name_convert(db_name)
        return mom[db_name].delete(db, proto[proto_id], 1)

    @keyword('Redis Key Should Be Exist')
    def check_if_key_exits(self, db_name, proto_id):
        global mom
        global proto
        
        db = db_name_convert(db_name)
        if mom[db_name].exists(db, proto[proto_id]) != 0:
            logger.error("Key " + proto_id + " doesn't exist in Redis.")
            raise AssertionError

    @keyword('Redis Key Should Not Be Exist')
    def check_if_key_not_exits(self, db_name, proto_id):
        global mom
        global proto

        db = db_name_convert(db_name)
        if mom[db_name].exists(db, proto[proto_id]) == 0:
            logger.error("Key " + proto_id + " exist in Redis.")
            raise AssertionError

    @keyword('Hmset To Redis')
    def hmset_to_redis(self, db_name, proto_id, select_fields):
        global mom
        global proto

        db = db_name_convert(db_name)
        mom[db_name].hmset(db, proto[proto_id], select_fields, 1)

    @keyword('Hgetall from Redis')
    def hgetall(self, db_name, proto_id, dict_fields):
        global mom
        global proto
        
        db = db_name_convert(db_name)
        result, _, _ = mom[db_name].hgetall(db, proto[proto_id], flag = 1)
        for field in dict_fields:
            dict_fields[field] = analyse_result(result, field, dict_fields)
        return dict_fields

    @keyword('Flush Db')
    def flushdb(self, db_name):
        global mom
        db = db_name_convert(db_name)
        mom[db_name].flushdb(db)
